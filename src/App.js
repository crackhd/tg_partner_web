/* global BigInt */

import React from 'react';
import './App.css';
import { InputGroup, FormControl, Jumbotron, Button, Alert, Row, Col, Table, Card, ListGroup, Badge } from 'react-bootstrap';
import Web3 from 'web3';
import { address, abi, network } from './Reward.jsx';

const usdToEther = 0.0044;
const etherToUsd = 228.28;
const exampleRewardPoints = [ 50, 150, 400, 800 ];

const web3 = new Web3(Web3.givenProvider || "http://localhost:8545");

function contract() {
   let ctr = new web3.eth.Contract(abi, address);
   ctr.options.gas = 5000000;

   return ctr;
}

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
        contract: null,
        web3Ready: false,

        durationMinutes: 600,
        rubyToEther: 0,
        totalSupplyUsd: 0,
        totalSupply: 0,
        totalBankUsd: 0,
        totalBank: 0,
        balanceEther: 0,

        examples: [],
        challenges: [],

        averageRewardUsd: 0,
        averageRewardRuby: 0,
        myBalanceRuby: 0,
        myBalanceUsd: 0,

        sellValue: 0
    };
  }

   componentDidMount() {
        window.addEventListener('load', this.onCompleted.bind(this));
     }

     onCompleted() {
         web3.eth.getAccounts().then(this.updateContract.bind(this));
     }

  updateSellValue(evt) {
    this.setState({
      sellValue: evt.target.value
    });
  }

    sell() {
        let ctr = contract();
        let amount = this.state.sellValue;
        web3.eth.requestAccounts().then(function(accounts) {
            if(accounts.length == 0) {
                alert("No accounts");
                return;
            }
            let account = accounts[0];
            ctr.methods.sell(amount).send({from: account, value: 0, gaslimit: 100000});
        })
    }

  async loadExamples() {
      var examples = [];

      var sumRewards = 0;

      let ctr = contract();

      for(var i = 0; i < exampleRewardPoints.length; i++) {
          let points = exampleRewardPoints[i];
          let reward = Number(BigInt(await ctr.methods.rewardForPoints(points, "").call()));
          examples.push({
              views: points,
              rubys: reward,
              ether: reward * this.state.rubyToEther,
              usd: reward * this.state.rubyToEther * etherToUsd,
          });
          sumRewards += reward / points;
      }

      let avgRewardRubys = (sumRewards / exampleRewardPoints.length).toFixed(0);

      this.setState({
          examples: examples,
          averageRewardRuby: avgRewardRubys,
          averageRewardUsd: avgRewardRubys * this.state.rubyToEther * etherToUsd,
      });
  }

  updateContract() {

      var self = this;
      web3.eth.getAccounts().then(function(accounts) {
          if(accounts.length == 0) {
              return alert('–ù–µ—Ç –≤–∏–∂—É –∞–∫–∫–∞—É–Ω—Ç—ã Ethereum!');
          }

          web3.eth.net.getNetworkType().then(async function(netId) {
              if(netId != network) {
                  console.log("Network not matching " + netId);
                  return;
              }

             let ctr = contract();

             let duration = Number(await ctr.methods.duration().call()) / 60;
             let weiPerToken = BigInt(await ctr.methods.weiPerToken().call());
             let totalSupply = BigInt(await ctr.methods.totalSupply().call());
             let totalBank = BigInt(await ctr.methods.totalBank().call());

             let rubyToEther = Number(Web3.utils.fromWei(weiPerToken.toString(), 'ether'));

             let balanceWei = await web3.eth.getBalance(address);
             let balanceEther = Number(Web3.utils.fromWei(balanceWei.toString(), 'ether'));

             let user = accounts[0];
             let userBalance = Number(BigInt(await ctr.methods.balanceOf(user).call()));
             let userBalanceEther = (userBalance * rubyToEther).toFixed();

             self.setState({
                 web3Ready: true,
                 balanceEther: balanceEther,
                 durationMinutes: Number(duration),
                 rubyToEther: rubyToEther,
                 totalSupply: Number(totalSupply),
                 totalSupplyUsd: Number(totalSupply) * rubyToEther * etherToUsd,
                 totalBank: Number(totalBank),
                 totalBankUsd: Number(totalBank) * rubyToEther * etherToUsd,
                 myBalanceRuby: userBalance,
                 myBalanceUsd: userBalance * rubyToEther * etherToUsd,
             }, () => {
                  self.loadChallenges();
                  self.loadExamples();
             })
         });
      });
  }

  loadChallenges() {
      var challenges = this.state.challenges;
      challenges.push({
          group: 'test',
          status: 'CONFIRMED',
          resource: 123,
          time: '13 min',
          reward: 10,
          before: 2,
          after: 10,
      });
      this.setState({
          challenges: challenges
      });
  }

  initWeb3() {
      var self = this;
      web3.eth.requestAccounts().then(function(accounts) {
          if(accounts.length == 0) {
              alert('–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ Metamask –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
              return;
          }

          self.updateContract();
      });
  }

  allowedSell() {
      let allowance = this.state.balanceEther
      let ether = this.state.myBalanceRuby * this.state.rubyToEther;
      if (ether > allowance) {
          return (allowance / this.state.rubyToEther).toFixed(0);
      }
      return this.state.myBalanceRuby;
  }

  allowedSellUsd() {
      let allowanceRubys = this.allowedSell();
      return allowanceRubys * this.state.rubyToEther * etherToUsd;
  }

  tooltipsUI() {
      return (<div>

      <Alert variant="warning">
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä—ã Chrome –∏–ª–∏ Firefox –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
      </Alert>
      <Alert variant="info">
        <p>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ <a href="https://metamask.io" target="_blank"><strong>Metamask</strong></a> –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Ethereum.
        Ethereum –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Å –∫–∞—Ä—Ç—ã, –∏—â–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã <strong>Deposit</strong>.</p>
        <p>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ ETH.</p>
      </Alert>

      <div style={{height: '24px'}}></div>
      </div>)
  }


  newChallengeUI() {
      return (<Jumbotron>
          <InputGroup className="mb-3">

          <FormControl disabled={!this.state.web3Ready}
            placeholder="https://t.me/channel/123"
            aria-label="Telegram post URL"
          />
          <InputGroup.Append>
            <Button variant="primary" id="basic-addon2" disabled={!this.state.web3Ready}>New Challenge</Button>
          </InputGroup.Append>
          </InputGroup>

          </Jumbotron>);
  }

  statusUI() {
      return (<div>
          <div style={{height: '24px'}}></div>

          <h3>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</h3>

              <div style={{height: '7px'}}></div>

              <Card>
                <ListGroup variant="flush">
                  <ListGroup.Item>–û–±—â–∏–π –±–∞–Ω–∫ ~ <strong>${this.state.totalSupplyUsd.toFixed(0)}</strong> (üíé{this.state.totalSupply})</ListGroup.Item>
                  <ListGroup.Item>–°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–Ω–∫ ~ <strong>${this.state.totalBankUsd.toFixed(0)}</strong> (üíé{this.state.totalBank})</ListGroup.Item>
                </ListGroup>
                <ListGroup.Item>–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ö–∏—Ç ~ <strong>${this.state.averageRewardUsd.toFixed(4)}</strong> (üíé{this.state.averageRewardRuby})</ListGroup.Item>
              </Card>
      </div>)
  }

  exampleCardItemUI(example, i) {
      return (<div key={i}>

          &nbsp;&nbsp;&nbsp;&nbsp;–∑–∞ {example.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;{example.rubys} –≤ üíé<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<strong>{example.ether}</strong> –≤ ETH<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;~&nbsp;<strong>${example.usd.toFixed(4)}</strong> –ø—Ä–∏ –≤—ã–≤–æ–¥–µ<br/><br/>
          </div>);
  }

  quotesUI() {
      return (<div>

          <div style={{height: '24px'}}></div>

          <Row>
            <h3>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞–≤–æ–∫</h3>

                <p>&nbsp;&nbsp;&nbsp;&nbsp;$1&nbsp;=&nbsp;{usdToEther} ETH (üíé{usdToEther / this.state.rubyToEther})<br/><br/></p>
          </Row>

          <div style={{height: '7px'}}></div>

          <Row>

              <Col md={6}>
                  <Card>
                    <ListGroup variant="flush">
                      <ListGroup.Item>
                            {this.state.examples.slice(0, 2).map(this.exampleCardItemUI.bind(this))}
                      </ListGroup.Item>
                    </ListGroup>
                  </Card>
              </Col>
              <Col md={6}>
                  <Card>
                    <ListGroup variant="flush">
                      <ListGroup.Item>
                            {this.state.examples.slice(2).map(this.exampleCardItemUI.bind(this))}
                      </ListGroup.Item>
                    </ListGroup>
                  </Card>
              </Col>
          </Row>

      </div>)
  }

  tableUI() {
      return (<Row>
      <Col md={12}>
      <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</h2>

          <Button variant="success" onClick={this.updateContract.bind(this)} disabled={!this.state.web3Ready}>–æ–±–Ω–æ–≤–∏—Ç—å</Button>

          <div style={{height: '7px'}}></div>

              <Table striped bordered hover size="sm">
                  <thead>
                  <tr>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ö–∞–Ω–∞–ª</th>
                    <th>–ü–æ—Å—Ç</th>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–î–æ / –ø–æ—Å–ª–µ</th>
                    <th>–ù–∞–≥—Ä–∞–¥–∞</th>
                  </tr>
                  </thead>
                  <tbody>
                  {this.state.challenges.map((challenge, i) => {
                  // Return the element. Also pass key
                  return (<tr key={i}>
                    <td>{challenge.status}</td>
                    <td>{challenge.group}</td>
                    <td>{challenge.resource}</td>
                    <td>{challenge.time}</td>
                    <td>{challenge.before} / {challenge.after}</td>
                    <td>üíé{challenge.reward} <strong>~ ${(challenge.reward * this.state.rubyToEther).toFixed(3)}</strong></td>
                  </tr>)
                  })}
                  </tbody>
                  </Table>

              { this.state.challenges.length == 0
                  ? (<span>–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π</span>)
                  : null
              }



              { this.state.challenges.length > 10
                  ? (<Button variant="success" onClick={this.updateContract.bind(this)}>–æ–±–Ω–æ–≤–∏—Ç—å</Button>)
                  : null
              }
      </Col>
      </Row>);
  }

  sellUI () {
      return (<Row>
      <Col md={6}>
        <Jumbotron>
      <h2>–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏</h2>
                  <Card>
                    <ListGroup variant="flush">
                        <ListGroup.Item>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å, –∑–∞ üíé –≤—ã–ø–ª–∞—Ç–∞: <strong>{this.state.rubyToEther}</strong> ETH</ListGroup.Item>
                      </ListGroup>
                      <ListGroup.Item>
                        –í–∞—à –±–∞–ª–∞–Ω—Å ~ <strong><Badge variant="info">üíé{this.state.myBalanceRuby}</Badge></strong> (${this.state.myBalanceUsd.toFixed(1)})
                      </ListGroup.Item>
                    <ListGroup.Item>
                      –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ ~ <strong><Badge variant="success">üíé{this.allowedSell()}</Badge></strong> (${this.allowedSellUsd().toFixed(1)})
                    </ListGroup.Item>
                      </Card>


          <div style={{height: '7px'}}></div>
      <InputGroup className="mb-3">
        <InputGroup.Prepend>
        –°–∫–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º? &nbsp;&nbsp;
          </InputGroup.Prepend>
        <InputGroup.Prepend>
          <InputGroup.Text>üíé</InputGroup.Text>
        </InputGroup.Prepend>
        <FormControl aria-label="–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ (–≤ —Ä—É–±–∏–Ω–∞—Ö)" value={this.state.inputValue} onChange={evt => this.updateSellValue(evt)} disabled={!this.state.web3Ready} />
        <InputGroup.Append>
          <Button variant="primary" onClick={this.sell.bind(this)} disabled={!this.state.web3Ready}>Sell</Button>
        </InputGroup.Append>
      </InputGroup>
        </Jumbotron>
      </Col>


      <Col md={6}>
      <Alert variant="secondary">
          –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ ETH –Ω–∞ —Å–≤–æ–µ–π –∫–æ—à–µ–ª–µ–∫
          –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ <i>gas</i>.

          –ü–æ–∫—É–ø–∫–∏ –Ω–∞ $4 –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å, —á—Ç–æ –±—ã –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏.
      </Alert>
      <Alert variant="info">
          <p><i>
              –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –º–æ–∂–µ—Ç —É–∑–Ω–∞–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–∏—Ä–æ—Å–ª–æ –∫ –ø–æ—Å—Ç—É –≤–Ω—É—Ç—Ä–∏ Telegram, —Å–∞–º. </i></p>

          <p>
          –ü–æ—Ç–æ–º—É –≤ –æ–±–ª–∞–∫–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —ç—Ç–∏ —Å–∞–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º,
          –∫–æ–≥–¥–∞ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏.
          </p>
      </Alert>


      </Col>

      </Row>);
  }

  footerUI() {
      return (<Row style={{fontSize: '14px'}}>

      <Col md={6}>
            <ListGroup variant="flush">
              <ListGroup.Item>–ö–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω <a href="https://github.com/crackhd/tg_partner_contract">–Ω–∞ Github</a></ListGroup.Item>
                <ListGroup.Item>–ö–æ–¥ –±–æ—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω <a href="https://github.com/crackhd/tg_partner">–Ω–∞ Github</a></ListGroup.Item>
                  <ListGroup.Item>–ö–æ–¥ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω <a href="https://github.com/crackhd/tg_partner_web">–Ω–∞ Github</a></ListGroup.Item>
              </ListGroup>
      </Col>

          <Col md={6}>
          <ul>
          <li>–ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏—é –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π —Å –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –≥–∞–∑. –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é Sell —Å —Å—É–º–º–æ–π 0</li>
          <li>–æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏—à—å –æ–¥–Ω—É –∫–∞–º–ø–∞–Ω–∏—é –¥–æ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ª–∏–±–æ –¥–æ <code>Sell(0)</code>, –µ—Å–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è –ø–æ–≤–∏—Å–ª–∞)</li>
          </ul>
          </Col>
      </Row>);
  }

  render() {
    return (<div className="App container">
    <Row style={{height: '58px'}}></Row>

    <Row>
      <Col md={6}>
        <Jumbotron>
          <h1>–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞</h1>
          <p>
            –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
            –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.
          </p>
          <div>
              <p style={{color: 'gray'}}>
                1‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º <a href="https://crackhd.github.com/tg_partner_web">—Å—Ç—Ä–∞–Ω–∏—Ü—É</a> —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (<strong>–≥–æ—Ç–æ–≤–æ!</strong>)
              </p><p>
                2‚É£ –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–æ—Å—Ç –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–º—É –º—ã —Ö–æ—Ç–∏–º –¥–æ–ª–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
              </p><p>
                3‚É£ –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ URL –∏ –∂–º–µ–º <Badge variant="primary">New Challenge</Badge>
              </p><p>
                4‚É£ –í —Ç–µ—á–µ–Ω–∏–∏ <strong>{this.state.durationMinutes}</strong> –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∏–Ω—É—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –≤–∞—à–∏–º–∏, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ üíé
              </p><p>
                5‚É£ –ó–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ä—É–±–∏–Ω—ã üíé –≤—ã–≤–æ–¥–∏–º –≤ Ethereum, —á—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–µ–Ω—å–≥–∏. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ <Badge variant="primary">Sell</Badge>
              </p>
          </div>
          <p>
          <a href="https://academy.binance.com/ru/blockchain/what-are-smart-contracts" target="_blank">
            <Button variant="info">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</Button>
          </a>
          </p>
        </Jumbotron>
        </Col>

    <Col md={6}>

        {this.tooltipsUI()}

        { this.state.web3Ready
            ? this.newChallengeUI()
            : (<div>
                <p><Button variant="success" onClick={this.initWeb3.bind(this)}>–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</Button></p>
              </div>) }

          { this.state.web3Ready
              ? this.statusUI()
              : null
          }

      </Col>

    </Row>

    { this.state.web3Ready
        ? (<Row style={{height: '44px'}}></Row>)
        : null
    }

    <Row style={{height: '54px'}}></Row>


    { this.state.web3Ready
        ? this.tableUI()
        : null
    }

    <Row style={{height: '84px'}}></Row>

    {
        this.state.web3Ready
            ? this.sellUI()
            : null
    }

    <Row style={{height: '64px'}}></Row>

    {
        this.state.web3Ready
            ? this.quotesUI()
            : null
    }

    <Row style={{height: '84px'}}></Row>

    {
        this.state.web3Ready
            ? this.footerUI()
            : null
    }

        </div>
      );
    }
}

export default App;
